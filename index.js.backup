# Backup your current index.js
cp index.js index.js.backup

# Create a modified version that uses the proxy
cat > index.js << 'EOF'
require("./config/env");

const express = require("express");
const path = require("path");

// Routers
const authProxy = require("./routes/auth-proxy");  // Changed from authRouter
const jobsRouter = require("./routes/jobs");
const auditRouter = require("./routes/audit");
const streamRouter = require("./routes/stream");

// RDS migration
const { migrateAudit } = require("./config/rds");

const app = express();
app.use(express.json());

// static frontend
app.use(express.static(path.join(__dirname, "public")));

// API routes - now using auth proxy to user service
app.use("/api/auth", authProxy);  // Changed from authRouter
app.use("/api/v1/jobs", jobsRouter);
app.use("/api/v1/audit", auditRouter);
app.use("/api/v1/stream", streamRouter);

// Health check - enhanced to show microservices status
app.get("/health", async (req, res) => {
  const health = { 
    ok: true, 
    service: "main-web-service",
    timestamp: new Date().toISOString()
  };
  
  // Check if user service is healthy
  try {
    const axios = require('axios');
    const userServiceHealth = await axios.get('http://localhost:3001/health');
    health.userService = userServiceHealth.data;
  } catch (error) {
    health.userService = { status: "unreachable", error: error.message };
  }
  
  res.json(health);
});

// Optional: run reconcile on boot
try {
  const { reconcile } = require("./utils/reconcile");
  reconcile().catch((e) => console.warn("[reconcile] error on boot:", e.message));
} catch (e) {
  // reconcile module is optional
}

// Kick off RDS migration
(async () => {
  try {
    await migrateAudit();
    console.log("[rds] audit table ready");
  } catch (e) {
    console.error("[rds] migrate error:", e.message);
  }
})();

const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
  console.log(`🚀 Main Web Service running on :${PORT}`);
  console.log(`🔐 Authentication handled by User Service on port 3001`);
});
EOF
